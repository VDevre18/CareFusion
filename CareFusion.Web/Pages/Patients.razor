@page "/patients"
@inject IPatientService PatientService
@inject NavigationManager NavigationManager

<PageTitle>Patients - CareFusion</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>Patients</h2>
    <button class="btn btn-primary" @onclick="Add">
        <i class="bi bi-plus-circle"></i> Add Patient
    </button>
</div>

<div class="card mb-4">
    <div class="card-body">
        <div class="row">
            <div class="col-md-8">
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="bi bi-search"></i>
                    </span>
                    <input @bind="term" @onkeypress="@(async (e) => { if (e.Key == "Enter") await Search(); })" 
                           class="form-control" placeholder="Search by name or MRN..." />
                    <button class="btn btn-outline-secondary" @onclick="Search">Search</button>
                </div>
            </div>
            <div class="col-md-4">
                <button class="btn btn-outline-secondary" @onclick="ClearSearch">Clear</button>
            </div>
        </div>
    </div>
</div>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (items.Any())
{
    <PatientTable Items="items" OnView="View" OnEdit="Edit" />
}
else
{
    <div class="card">
        <div class="card-body text-center">
            <i class="bi bi-person-plus display-1 text-muted"></i>
            <h4 class="mt-3">No Patients Found</h4>
            <p class="text-muted">@(string.IsNullOrEmpty(term) ? "No patients in the system yet." : "No patients match your search criteria.")</p>
            <button class="btn btn-primary" @onclick="Add">Add First Patient</button>
        </div>
    </div>
}

@code {
    private string? term;
    private List<CareFusion.Model.Dtos.PatientDto> items = new();
    private bool isLoading = false;

    protected override async Task OnInitializedAsync() => await Search();

    private async Task Search()
    {
        try
        {
            isLoading = true;
            var page = await PatientService.SearchAsync(term, 1, 25);
            items = page.Items.ToList();
        }
        catch (Exception ex)
        {
            // TODO: Show error message to user
            Console.WriteLine($"Error searching patients: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ClearSearch()
    {
        term = "";
        await Search();
    }

    private void View(int id) => NavigationManager.NavigateTo($"/patients/{id}");

    private void Edit(int id) => NavigationManager.NavigateTo($"/patients/edit/{id}");

    private void Add() => NavigationManager.NavigateTo("/patients/add");
}
