@page "/login"
@layout EmptyLayout
@attribute [AllowAnonymous]
@inject IAuthService Auth
@inject NavigationManager Navigation

<PageTitle>Login - CareFusion</PageTitle>

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <h2>CareFusion</h2>
            <p>Medical Imaging Management System</p>
        </div>
        
        <div class="login-body">
            <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary class="alert alert-danger" />
                
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">@errorMessage</div>
                }
                
                <div class="form-group mb-3">
                    <label for="username" class="form-label">Username</label>
                    <InputText @bind-Value="loginModel.Username" class="form-control" id="username" placeholder="Enter username" />
                </div>
                
                <div class="form-group mb-3">
                    <label for="password" class="form-label">Password</label>
                    <InputText @bind-Value="loginModel.Password" class="form-control" type="password" id="password" placeholder="Enter password" />
                </div>
                
                <div class="d-grid">
                    <button type="submit" class="btn btn-primary" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Login
                    </button>
                </div>
            </EditForm>
            
            <div class="demo-credentials mt-3">
                <small class="text-muted">
                    Demo credentials: admin / admin
                </small>
            </div>
        </div>
    </div>
</div>

<style>
    .login-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    
    .login-card {
        background: white;
        border-radius: 10px;
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
        padding: 40px;
        width: 100%;
        max-width: 400px;
    }
    
    .login-header {
        text-align: center;
        margin-bottom: 30px;
    }
    
    .login-header h2 {
        color: #333;
        font-weight: 600;
        margin-bottom: 5px;
    }
    
    .login-header p {
        color: #666;
        font-size: 14px;
        margin: 0;
    }
    
    .demo-credentials {
        text-align: center;
        padding: 10px;
        background: #f8f9fa;
        border-radius: 5px;
    }
</style>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = "";
    private bool isLoading = false;
    
    public class LoginModel
    {
        public string Username { get; set; } = "";
        public string Password { get; set; } = "";
    }
    
    protected override async Task OnInitializedAsync()
    {
        // If already logged in, redirect to dashboard
        if (Auth.CurrentUser != null)
        {
            Navigation.NavigateTo("/");
        }
    }
    
    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = "";
            
            var success = await Auth.LoginAsync(loginModel.Username, loginModel.Password);
            if (success)
            {
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Invalid username or password";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Login failed: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}