@page "/deleted-patients"
@attribute [Authorize]
@using CareFusion.Model.Dtos
@using CareFusion.Web.Services.Interfaces
@inject NavigationManager Navigation
@inject IPatientService PatientService

<PageTitle>Deleted Patients - CareFusion</PageTitle>

<div class="deleted-patients-container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2>Deleted Patients</h2>
            <p class="text-muted">Manage soft-deleted patient records and restore if needed</p>
        </div>
        <button class="btn btn-outline-danger" @onclick="ShowPurgeModal">
            <i class="bi bi-trash3"></i> Purge All
        </button>
    </div>

    <div class="filters-section mb-4">
        <div class="row">
            <div class="col-md-6">
                <input type="text" class="form-control search-input" placeholder="Search by name or MRN" @bind="searchTerm" @oninput="OnSearchTermChanged" />
            </div>
            <div class="col-md-3">
                <select class="form-select" @bind="selectedTimeFilter" @bind:after="FilterPatients">
                    <option value="all">All Time</option>
                    <option value="today">Today</option>
                    <option value="week">This Week</option>
                    <option value="month">This Month</option>
                    <option value="year">This Year</option>
                </select>
            </div>
            <div class="col-md-3">
                <select class="form-select" @bind="selectedDeletedBy" @bind:after="FilterPatients">
                    <option value="all">Deleted By Anyone</option>
                    <option value="current">Deleted By Me</option>
                    <option value="system">System Deleted</option>
                </select>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading deleted patients...</p>
        </div>
    }
    else if (filteredPatients.Any())
    {
        <div class="results-summary mb-3">
            <span class="text-muted">Showing @filteredPatients.Count of @deletedPatients.Count deleted patients</span>
        </div>

        <div class="patients-list">
            <div class="row fw-bold border-bottom pb-2 mb-3">
                <div class="col-3">Patient Name</div>
                <div class="col-2">MRN</div>
                <div class="col-2">Deleted Date</div>
                <div class="col-2">Deleted By</div>
                <div class="col-3">Actions</div>
            </div>

            @foreach (var patient in filteredPatients)
            {
                <div class="row align-items-center py-3 border-bottom patient-row">
                    <div class="col-3">
                        <div class="patient-info">
                            <div class="patient-name">@patient.FirstName @patient.LastName</div>
                            <small class="text-muted">DOB: @patient.DateOfBirth?.ToString("MM/dd/yyyy") | @patient.Gender</small>
                        </div>
                    </div>
                    <div class="col-2">
                        <span class="mrn">@patient.MRN</span>
                    </div>
                    <div class="col-2">
                        <div class="deleted-info">
                            <div>@patient.ModifiedAtUtc?.ToString("MM/dd/yyyy")</div>
                            <small class="text-muted">@patient.ModifiedAtUtc?.ToString("h:mm tt")</small>
                        </div>
                    </div>
                    <div class="col-2">
                        <span class="deleted-by">@patient.ModifiedBy</span>
                    </div>
                    <div class="col-3">
                        <div class="d-flex gap-2">
                            <button class="btn btn-success btn-sm" @onclick="() => RestorePatient(patient.Id)" title="Restore Patient">
                                <i class="bi bi-arrow-counterclockwise"></i> Restore
                            </button>
                            <button class="btn btn-outline-primary btn-sm" @onclick="() => ViewPatientHistory(patient.Id)" title="View History">
                                <i class="bi bi-clock-history"></i> History
                            </button>
                            <button class="btn btn-outline-danger btn-sm" @onclick="() => PermanentDelete(patient.Id)" title="Permanently Delete">
                                <i class="bi bi-trash3"></i> Purge
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="pagination-section mt-4 d-flex justify-content-between align-items-center">
            <div class="bulk-actions">
                <button class="btn btn-success me-2" @onclick="RestoreSelected" disabled="@(!selectedPatients.Any())">
                    <i class="bi bi-arrow-counterclockwise"></i> Restore Selected (@selectedPatients.Count)
                </button>
                <button class="btn btn-outline-danger" @onclick="PurgeSelected" disabled="@(!selectedPatients.Any())">
                    <i class="bi bi-trash3"></i> Purge Selected (@selectedPatients.Count)
                </button>
            </div>
            <div class="pagination-info">
                <span class="text-muted">Page 1 of 1</span>
            </div>
        </div>
    }
    else
    {
        <div class="text-center text-muted py-5">
            <i class="bi bi-inbox display-4"></i>
            <h4 class="mt-3">No Deleted Patients Found</h4>
            <p>@(string.IsNullOrWhiteSpace(searchTerm) ? "There are no deleted patients in the system." : "No deleted patients match your search criteria.")</p>
        </div>
    }
</div>

<style>
    .deleted-patients-container {
        padding: 20px;
    }

    .search-input {
        border-bottom: 2px solid #007bff;
        border-radius: 0;
        border-top: none;
        border-left: none;
        border-right: none;
        box-shadow: none;
        padding-left: 0;
    }

    .search-input:focus {
        border-bottom-color: #0056b3;
        box-shadow: none;
    }

    .patient-row {
        transition: background-color 0.2s ease;
    }

    .patient-row:hover {
        background-color: #f8f9fa;
    }

    .patient-name {
        font-weight: 500;
        color: #333;
    }

    .mrn {
        font-family: monospace;
        font-weight: 500;
        color: #666;
    }

    .deleted-info {
        font-size: 14px;
    }

    .deleted-by {
        font-weight: 500;
        color: #666;
    }

    .btn-sm {
        font-size: 12px;
        padding: 6px 12px;
    }

    .border-bottom {
        border-bottom: 1px solid #dee2e6 !important;
    }

    .results-summary {
        font-size: 14px;
        padding: 10px 0;
    }

    .bulk-actions {
        display: flex;
        align-items: center;
    }

    .pagination-info {
        font-size: 14px;
    }

    .filters-section .form-select,
    .filters-section .form-control {
        border-radius: 6px;
    }
</style>

@code {
    private List<PatientDto> deletedPatients = new();
    private List<PatientDto> filteredPatients = new();
    private List<int> selectedPatients = new();
    private string searchTerm = "";
    private string selectedTimeFilter = "all";
    private string selectedDeletedBy = "all";
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadDeletedPatients();
    }

    private async Task LoadDeletedPatients()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Load deleted patients from service
            deletedPatients = await PatientService.GetDeletedAsync();

            FilterPatients();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading deleted patients: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void OnSearchTermChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        FilterPatients();
    }


    private void FilterPatients()
    {
        var filtered = deletedPatients.AsQueryable();

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(p => 
                p.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                p.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (p.MRN ?? "").Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        // Apply time filter
        if (selectedTimeFilter != "all")
        {
            var now = DateTime.Now;
            switch (selectedTimeFilter)
            {
                case "today":
                    filtered = filtered.Where(p => p.ModifiedAtUtc.HasValue && p.ModifiedAtUtc.Value.Date == now.Date);
                    break;
                case "week":
                    var weekStart = now.AddDays(-(int)now.DayOfWeek);
                    filtered = filtered.Where(p => p.ModifiedAtUtc.HasValue && p.ModifiedAtUtc.Value >= weekStart);
                    break;
                case "month":
                    var monthStart = new DateTime(now.Year, now.Month, 1);
                    filtered = filtered.Where(p => p.ModifiedAtUtc.HasValue && p.ModifiedAtUtc.Value >= monthStart);
                    break;
                case "year":
                    var yearStart = new DateTime(now.Year, 1, 1);
                    filtered = filtered.Where(p => p.ModifiedAtUtc.HasValue && p.ModifiedAtUtc.Value >= yearStart);
                    break;
            }
        }

        // Apply deleted by filter
        if (selectedDeletedBy != "all")
        {
            switch (selectedDeletedBy)
            {
                case "current":
                    filtered = filtered.Where(p => p.ModifiedBy == "Current User"); // In real app, use actual current user
                    break;
                case "system":
                    filtered = filtered.Where(p => p.ModifiedBy == "System");
                    break;
            }
        }

        filteredPatients = filtered.ToList();
        StateHasChanged();
    }

    private async Task RestorePatient(int patientId)
    {
        try
        {
            // In real implementation, call API to restore patient
            var patient = deletedPatients.FirstOrDefault(p => p.Id == patientId);
            if (patient != null)
            {
                deletedPatients.Remove(patient);
                FilterPatients();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error restoring patient: {ex.Message}");
        }
    }

    private async Task RestoreSelected()
    {
        try
        {
            // In real implementation, call API to restore selected patients
            var patientsToRestore = deletedPatients.Where(p => selectedPatients.Contains(p.Id)).ToList();
            foreach (var patient in patientsToRestore)
            {
                deletedPatients.Remove(patient);
            }
            selectedPatients.Clear();
            FilterPatients();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error restoring selected patients: {ex.Message}");
        }
    }

    private async Task PermanentDelete(int patientId)
    {
        try
        {
            // In real implementation, call API to permanently delete patient
            var patient = deletedPatients.FirstOrDefault(p => p.Id == patientId);
            if (patient != null)
            {
                deletedPatients.Remove(patient);
                FilterPatients();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error permanently deleting patient: {ex.Message}");
        }
    }

    private async Task PurgeSelected()
    {
        try
        {
            // In real implementation, call API to permanently delete selected patients
            var patientsToPurge = deletedPatients.Where(p => selectedPatients.Contains(p.Id)).ToList();
            foreach (var patient in patientsToPurge)
            {
                deletedPatients.Remove(patient);
            }
            selectedPatients.Clear();
            FilterPatients();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error purging selected patients: {ex.Message}");
        }
    }

    private void ViewPatientHistory(int patientId)
    {
        Navigation.NavigateTo($"/patients/{patientId}/history");
    }

    private void ShowPurgeModal()
    {
        // In real implementation, show confirmation modal
        Console.WriteLine("Show purge all confirmation modal");
    }
}