@page "/patients/{id:int}"
@using CareFusion.Model.Dtos
@using CareFusion.Web.Services.Interfaces
@attribute [Authorize]
@inject IPatientService PatientService
@inject IPatientNoteService PatientNoteService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Patient Details - @(patient?.FullName ?? "Loading...") - CareFusion</PageTitle>

<div class="patient-detail-page">
    @if (patient == null)
    {
        <div class="loading-state">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Loading patient information...</p>
        </div>
    }
    else
    {
        <!-- Patient Header -->
        <div class="patient-header">
            <div class="patient-header-left">
                <button class="btn btn-outline-secondary btn-sm" @onclick="GoBack">
                    <i class="bi bi-arrow-left"></i>
                    Back to Patient List
                </button>
                <div class="patient-title">
                    <h2>@patient.FullName</h2>
                    <div class="patient-meta">
                        <span class="patient-id-badge">ID: @patient.Id.ToString("D3")</span>
                        <span class="status-badge @(patient.IsActive ? "active" : "inactive")">
                            @(patient.IsActive ? "Active" : "Inactive")
                        </span>
                    </div>
                </div>
            </div>
            <div class="patient-header-right">
                <button class="btn btn-outline-primary btn-sm" @onclick="EditPatient">
                    <i class="bi bi-pencil"></i>
                    Edit Patient
                </button>
                <button class="btn btn-primary btn-sm" @onclick="AddExam">
                    <i class="bi bi-plus-circle"></i>
                    Add Exam
                </button>
            </div>
        </div>

        <!-- Patient Info Cards -->
        <div class="patient-info-section">
            <div class="info-card">
                <div class="info-card-header">
                    <i class="bi bi-person"></i>
                    <h5>Patient Information</h5>
                </div>
                <div class="info-card-body">
                    <div class="info-row">
                        <span class="info-label">Date of Birth:</span>
                        <span class="info-value">@(patient.DateOfBirth?.ToString("MMM dd, yyyy") ?? "Unknown") (@(patient.DateOfBirth.HasValue ? CalculateAge(patient.DateOfBirth.Value) : 0) years old)</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">Gender:</span>
                        <span class="info-value">@patient.Gender</span>
                    </div>
                    @if (!string.IsNullOrEmpty(patient.Phone))
                    {
                        <div class="info-row">
                            <span class="info-label">Phone:</span>
                            <span class="info-value">@patient.Phone</span>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(patient.Email))
                    {
                        <div class="info-row">
                            <span class="info-label">Email:</span>
                            <span class="info-value">@patient.Email</span>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(patient.Address))
                    {
                        <div class="info-row">
                            <span class="info-label">Address:</span>
                            <span class="info-value">@patient.Address</span>
                        </div>
                    }
                </div>
            </div>
            
            <div class="info-card">
                <div class="info-card-header">
                    <i class="bi bi-activity"></i>
                    <h5>Quick Stats</h5>
                </div>
                <div class="info-card-body">
                    <div class="stats-grid">
                        <div class="stat-item">
                            <span class="stat-number">@exams.Count</span>
                            <span class="stat-label">Total Exams</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-number">@notes.Count</span>
                            <span class="stat-label">Clinical Notes</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-number">@reports.Count</span>
                            <span class="stat-label">Reports</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-number">@(patient.LastVisit?.ToString("MMM dd") ?? "N/A")</span>
                            <span class="stat-label">Last Visit</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tabbed Content -->
        <div class="tab-container">
            <ul class="nav nav-tabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link @(activeTab == "exams" ? "active" : "")" 
                            @onclick='() => SetActiveTab("exams")' 
                            type="button" role="tab">
                        <i class="bi bi-camera"></i>
                        Exams (@exams.Count)
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link @(activeTab == "notes" ? "active" : "")" 
                            @onclick='() => SetActiveTab("notes")' 
                            type="button" role="tab">
                        <i class="bi bi-journal-text"></i>
                        Clinical Notes (@notes.Count)
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link @(activeTab == "reports" ? "active" : "")" 
                            @onclick='() => SetActiveTab("reports")' 
                            type="button" role="tab">
                        <i class="bi bi-file-text"></i>
                        Reports (@reports.Count)
                    </button>
                </li>
            </ul>

            <div class="tab-content">
                <!-- Exams Tab -->
                @if (activeTab == "exams")
                {
                    <div class="tab-pane">
                        <div class="tab-header">
                            <h4>Medical Exams</h4>
                            <button class="btn btn-primary btn-sm" @onclick="AddExam">
                                <i class="bi bi-plus"></i>
                                Add Exam
                            </button>
                        </div>
                        @if (exams.Any())
                        {
                            <div class="exam-grid">
                                @foreach (var exam in exams)
                                {
                                    <div class="exam-card" @onclick="() => ViewExam(exam.Id)">
                                        <div class="exam-card-header">
                                            <h6>@exam.ExamType</h6>
                                            <span class="exam-date">@exam.CreatedAt.ToString("MMM dd, yyyy")</span>
                                        </div>
                                        <div class="exam-card-body">
                                            @if (!string.IsNullOrEmpty(exam.Description))
                                            {
                                                <p>@exam.Description</p>
                                            }
                                            <div class="exam-stats">
                                                <span class="badge bg-info">@GetExamImageCount(exam.Id) Images</span>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="empty-state">
                                <i class="bi bi-camera"></i>
                                <h5>No exams recorded</h5>
                                <p>This patient has no medical exams on file.</p>
                                <button class="btn btn-primary" @onclick="AddExam">
                                    <i class="bi bi-plus"></i>
                                    Add First Exam
                                </button>
                            </div>
                        }
                    </div>
                }

                <!-- Notes Tab -->
                @if (activeTab == "notes")
                {
                    <div class="tab-pane">
                        <div class="tab-header">
                            <h4>Clinical Notes</h4>
                            <button class="btn btn-primary btn-sm" @onclick="AddNote">
                                <i class="bi bi-plus"></i>
                                Add Note
                            </button>
                        </div>
                        @if (notes.Any())
                        {
                            <div class="notes-list">
                                @foreach (var note in notes.OrderByDescending(n => n.NoteDate))
                                {
                                    <div class="note-card">
                                        <div class="note-header">
                                            <div class="note-left">
                                                <h6 class="note-title">@note.NoteType</h6>
                                                <div class="note-meta">
                                                    <span class="note-date">@note.NoteDate.ToString("yyyy-MM-dd HH:mm tt")</span>
                                                    <span class="note-author">@note.AuthorName</span>
                                                </div>
                                            </div>
                                            <button class="btn btn-link btn-delete p-0" @onclick="() => DeleteNote(note.Id)" title="Delete Note">
                                                <i class="bi bi-trash text-danger"></i>
                                            </button>
                                        </div>
                                        <div class="note-content">
                                            @note.Content
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="empty-state">
                                <i class="bi bi-journal-text"></i>
                                <h5>No clinical notes</h5>
                                <p>No clinical notes have been added for this patient.</p>
                                <button class="btn btn-primary" @onclick="AddNote">
                                    <i class="bi bi-plus"></i>
                                    Add First Note
                                </button>
                            </div>
                        }
                    </div>
                }

                <!-- Reports Tab -->
                @if (activeTab == "reports")
                {
                    <div class="tab-pane">
                        <div class="tab-header">
                            <h4>Reports</h4>
                            <button class="btn btn-primary btn-sm" @onclick="AddReport">
                                <i class="bi bi-plus"></i>
                                Upload Report
                            </button>
                        </div>
                        @if (reports.Any())
                        {
                            <div class="reports-grid">
                                @foreach (var report in reports.OrderByDescending(r => r.CreatedAt))
                                {
                                    <div class="report-card" @onclick="() => ViewReport(report.Id)">
                                        <div class="report-icon">
                                            <i class="bi bi-file-text"></i>
                                        </div>
                                        <div class="report-info">
                                            <h6>@report.FileName</h6>
                                            <div class="report-meta">
                                                <span class="report-type">@report.ReportType</span>
                                                <span class="report-size">@FormatFileSize(report.FileSizeBytes)</span>
                                                <span class="report-date">@report.CreatedAt.ToString("MMM dd, yyyy")</span>
                                            </div>
                                        </div>
                                        <div class="report-actions">
                                            <button class="btn btn-outline-primary btn-sm" @onclick:stopPropagation="true" @onclick="() => DownloadReport(report.Id)">
                                                <i class="bi bi-download"></i>
                                            </button>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="empty-state">
                                <i class="bi bi-file-text"></i>
                                <h5>No reports uploaded</h5>
                                <p>No reports have been uploaded for this patient.</p>
                                <button class="btn btn-primary" @onclick="AddReport">
                                    <i class="bi bi-plus"></i>
                                    Upload First Report
                                </button>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int Id { get; set; }
    
    private PatientDto? patient;
    private List<ExamDto> exams = new();
    private List<PatientNoteDto> notes = new();
    private List<PatientReportDto> reports = new();
    private string activeTab = "exams";

    protected override async Task OnInitializedAsync()
    {
        await LoadPatientData();
        HandleQueryParameters();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadPatientData();
        HandleQueryParameters();
    }

    private void HandleQueryParameters()
    {
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var tab = query["tab"];
        if (!string.IsNullOrEmpty(tab))
        {
            activeTab = tab;
        }
    }

    /// <summary>
    /// Loads all patient data including exams, notes, and reports
    /// </summary>
    private async Task LoadPatientData()
    {
        try
        {
            // Load patient basic information from API
            patient = await PatientService.GetAsync(Id);
            
            if (patient == null)
            {
                // Patient not found, redirect to main page
                Navigation.NavigateTo("/");
                return;
            }
            
            // Load sample exams for this patient (until exam service is implemented)
            exams = GetSampleExams(Id);
            
            // Load notes from database
            notes = await PatientNoteService.GetByPatientIdAsync(Id);
            
            // Load sample reports for this patient (until report service is implemented)
            reports = GetSampleReports(Id);
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading patient data: {ex.Message}");
            // Fallback to sample data if API fails
            patient = GetSamplePatient(Id);
            exams = GetSampleExams(Id);
            notes = GetSampleNotes(Id);
            reports = GetSampleReports(Id);
        }
    }

    /// <summary>
    /// Gets sample patient data for demonstration
    /// </summary>
    private PatientDto? GetSamplePatient(int patientId)
    {
        var samplePatients = new List<PatientDto>
        {
            new() { Id = 1, FirstName = "John", LastName = "Smith", DateOfBirth = new DateTime(1985, 3, 15), Gender = "Male", Phone = "(555) 123-4567", Email = "john.smith@email.com", Address = "123 Main St, City, ST 12345", IsActive = true, LastVisit = DateTime.Now.AddDays(-5), CreatedAtUtc = DateTime.UtcNow.AddMonths(-6) },
            new() { Id = 2, FirstName = "Sarah", LastName = "Johnson", DateOfBirth = new DateTime(1992, 7, 22), Gender = "Female", Phone = "(555) 234-5678", Email = "sarah.johnson@email.com", Address = "456 Oak Ave, City, ST 12345", IsActive = true, LastVisit = DateTime.Now.AddDays(-12), CreatedAtUtc = DateTime.UtcNow.AddMonths(-3) },
            new() { Id = 3, FirstName = "Michael", LastName = "Brown", DateOfBirth = new DateTime(1978, 11, 8), Gender = "Male", Phone = "(555) 345-6789", Email = "michael.brown@email.com", Address = "789 Pine St, City, ST 12345", IsActive = false, LastVisit = DateTime.Now.AddDays(-45), CreatedAtUtc = DateTime.UtcNow.AddYears(-1) },
            new() { Id = 4, FirstName = "Emily", LastName = "Davis", DateOfBirth = new DateTime(1990, 5, 30), Gender = "Female", Phone = "(555) 456-7890", Email = "emily.davis@email.com", Address = "321 Elm St, City, ST 12345", IsActive = true, LastVisit = DateTime.Now.AddDays(-8), CreatedAtUtc = DateTime.UtcNow.AddMonths(-9) },
            new() { Id = 5, FirstName = "Robert", LastName = "Wilson", DateOfBirth = new DateTime(1965, 12, 12), Gender = "Male", Phone = "(555) 567-8901", Email = "robert.wilson@email.com", Address = "654 Cedar Ln, City, ST 12345", IsActive = true, LastVisit = DateTime.Now.AddDays(-2), CreatedAtUtc = DateTime.UtcNow.AddMonths(-4) }
        };
        
        return samplePatients.FirstOrDefault(p => p.Id == patientId);
    }

    /// <summary>
    /// Gets sample exam data for a patient
    /// </summary>
    private List<ExamDto> GetSampleExams(int patientId)
    {
        var sampleExams = new List<ExamDto>
        {
            new() { Id = 1, PatientId = patientId, StudyType = "Chest X-Ray", Modality = "X-Ray", Notes = "Routine chest examination", StudyDateUtc = DateTime.Now.AddDays(-10), IsActive = true },
            new() { Id = 2, PatientId = patientId, StudyType = "CT Scan", Modality = "CT", Notes = "Abdominal CT with contrast", StudyDateUtc = DateTime.Now.AddDays(-5), IsActive = true },
            new() { Id = 3, PatientId = patientId, StudyType = "MRI", Modality = "MRI", Notes = "Brain MRI scan", StudyDateUtc = DateTime.Now.AddDays(-2), IsActive = true }
        };

        return patientId switch
        {
            1 => sampleExams.Take(2).ToList(),
            2 => sampleExams.Take(1).ToList(),
            3 => sampleExams.ToList(),
            4 => sampleExams.Take(1).ToList(),
            5 => sampleExams.ToList(),
            _ => new List<ExamDto>()
        };
    }

    /// <summary>
    /// Gets sample note data for a patient
    /// </summary>
    private List<PatientNoteDto> GetSampleNotes(int patientId)
    {
        var sampleNotes = new List<PatientNoteDto>
        {
            new() { Id = 1, PatientId = patientId, NoteType = "Clinical", Content = "Patient reports feeling well. No acute symptoms.", AuthorName = "Dr. Smith", NoteDate = DateTime.Now.AddDays(-3), IsActive = true },
            new() { Id = 2, PatientId = patientId, NoteType = "Follow-up", Content = "Scheduled for follow-up appointment in 2 weeks.", AuthorName = "Nurse Johnson", NoteDate = DateTime.Now.AddDays(-1), IsActive = true }
        };

        return patientId <= 3 ? sampleNotes : new List<PatientNoteDto>();
    }

    /// <summary>
    /// Gets sample report data for a patient
    /// </summary>
    private List<PatientReportDto> GetSampleReports(int patientId)
    {
        var sampleReports = new List<PatientReportDto>
        {
            new() { Id = 1, PatientId = patientId, FileName = "Lab_Results_2024.pdf", ReportType = "Lab Results", FileSizeBytes = 1024000, ContentType = "application/pdf", FilePath = "/reports/lab_results_2024.pdf", UploadDate = DateTime.Now.AddDays(-7), FileSizeFormatted = "1.0 MB", IsActive = true },
            new() { Id = 2, PatientId = patientId, FileName = "Radiology_Report.pdf", ReportType = "Radiology", FileSizeBytes = 2048000, ContentType = "application/pdf", FilePath = "/reports/radiology_report.pdf", UploadDate = DateTime.Now.AddDays(-3), FileSizeFormatted = "2.0 MB", IsActive = true }
        };

        return patientId <= 2 ? sampleReports.Take(1).ToList() : (patientId <= 4 ? sampleReports : new List<PatientReportDto>());
    }

    /// <summary>
    /// Calculates age from date of birth
    /// </summary>
    private int CalculateAge(DateTime dateOfBirth)
    {
        var today = DateTime.Today;
        var age = today.Year - dateOfBirth.Year;
        if (dateOfBirth.Date > today.AddYears(-age)) age--;
        return age;
    }

    /// <summary>
    /// Gets the number of images for an exam
    /// </summary>
    private int GetExamImageCount(int examId)
    {
        return examId switch
        {
            1 => 3,
            2 => 15,
            3 => 8,
            _ => 0
        };
    }

    /// <summary>
    /// Formats file size for display
    /// </summary>
    private string FormatFileSize(long bytes)
    {
        if (bytes >= 1024 * 1024) return $"{bytes / (1024 * 1024):F1} MB";
        if (bytes >= 1024) return $"{bytes / 1024:F1} KB";
        return $"{bytes} bytes";
    }

    /// <summary>
    /// Sets the active tab in the tabbed interface
    /// </summary>
    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        StateHasChanged();
    }

    /// <summary>
    /// Navigates back to the patient list
    /// </summary>
    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    /// <summary>
    /// Navigates to the edit patient page
    /// </summary>
    private void EditPatient()
    {
        Navigation.NavigateTo($"/patients/edit/{Id}");
    }

    /// <summary>
    /// Shows the add exam modal or page
    /// </summary>
    private void AddExam()
    {
        Navigation.NavigateTo($"/patients/{Id}/exams/add");
    }

    /// <summary>
    /// Shows the add note modal or page
    /// </summary>
    private void AddNote()
    {
        Navigation.NavigateTo($"/patients/{Id}/notes/add");
    }

    /// <summary>
    /// Shows the add report modal or page
    /// </summary>
    private void AddReport()
    {
        Navigation.NavigateTo($"/patients/{Id}/reports/add");
    }

    /// <summary>
    /// Views a specific exam
    /// </summary>
    private void ViewExam(int examId)
    {
        Navigation.NavigateTo($"/exams/{examId}");
    }

    /// <summary>
    /// Views a specific report
    /// </summary>
    private void ViewReport(int reportId)
    {
        Navigation.NavigateTo($"/reports/{reportId}");
    }

    /// <summary>
    /// Downloads a specific report
    /// </summary>
    private async Task DownloadReport(int reportId)
    {
        // Implementation for downloading report
        Console.WriteLine($"Downloading report {reportId}");
    }

    /// <summary>
    /// Deletes a patient note
    /// </summary>
    private async Task DeleteNote(int noteId)
    {
        try
        {
            var note = notes.FirstOrDefault(n => n.Id == noteId);
            if (note != null)
            {
                // Confirm deletion
                if (await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this note?"))
                {
                    var result = await PatientNoteService.DeleteAsync(noteId);
                    if (result)
                    {
                        notes.Remove(note);
                        StateHasChanged();
                    }
                    else
                    {
                        await JSRuntime.InvokeVoidAsync("alert", "Failed to delete note");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting note: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error occurred while deleting note");
        }
    }

}